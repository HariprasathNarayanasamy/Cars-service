# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LoginInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: str=None, user_name: str=None, password: str=None):  # noqa: E501
        """LoginInfo - a model defined in Swagger

        :param user_id: The user_id of this LoginInfo.  # noqa: E501
        :type user_id: str
        :param user_name: The user_name of this LoginInfo.  # noqa: E501
        :type user_name: str
        :param password: The password of this LoginInfo.  # noqa: E501
        :type password: str
        """
        self.swagger_types = {
            'user_id': str,
            'user_name': str,
            'password': str
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'user_name': 'user_name',
            'password': 'password'
        }
        self._user_id = user_id
        self._user_name = user_name
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> 'LoginInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The login_info of this LoginInfo.  # noqa: E501
        :rtype: LoginInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this LoginInfo.


        :return: The user_id of this LoginInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this LoginInfo.


        :param user_id: The user_id of this LoginInfo.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_name(self) -> str:
        """Gets the user_name of this LoginInfo.


        :return: The user_name of this LoginInfo.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this LoginInfo.


        :param user_name: The user_name of this LoginInfo.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def password(self) -> str:
        """Gets the password of this LoginInfo.


        :return: The password of this LoginInfo.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this LoginInfo.


        :param password: The password of this LoginInfo.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password
