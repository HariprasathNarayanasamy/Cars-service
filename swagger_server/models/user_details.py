# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user_info_sans_pwd import UserInfoSansPwd  # noqa: F401,E501
from swagger_server import util


class UserDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_name: str=None, role: str=None, email: str=None, phone_number: str=None, user_id: str=None):  # noqa: E501
        """UserDetails - a model defined in Swagger

        :param user_name: The user_name of this UserDetails.  # noqa: E501
        :type user_name: str
        :param role: The role of this UserDetails.  # noqa: E501
        :type role: str
        :param last_name: The last_name of this UserDetails.  # noqa: E501
        :type last_name: str
        :param email: The email of this UserDetails.  # noqa: E501
        :type email: str
        :param phone_number: The phone_number of this UserDetails.  # noqa: E501
        :type phone_number: str
        :param user_id: The user_id of this UserDetails.  # noqa: E501
        :type user_id: str
        """
        self.swagger_types = {
            'user_name': str,
            'role': str,
            'last_name': str,
            'email': str,
            'phone_number': str,
            'user_id': str
        }

        self.attribute_map = {
            'user_name': 'user_name',
            'role': 'role',
            'last_name': 'last_name',
            'email': 'email',
            'phone_number': 'phone_number',
            'user_id': 'user_id'
        }
        self._user_name = user_name
        self._role = role
        self._email = email
        self._phone_number = phone_number
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt) -> 'UserDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_details of this UserDetails.  # noqa: E501
        :rtype: UserDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self) -> str:
        """Gets the user_name of this UserDetails.


        :return: The user_name of this UserDetails.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this UserDetails.


        :param user_name: The user_name of this UserDetails.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def role(self) -> str:
        """Gets the role of this UserDetails.


        :return: The role of this UserDetails.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this UserDetails.


        :param role: The role of this UserDetails.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    # @property
    # def last_name(self) -> str:
    #     """Gets the last_name of this UserDetails.


    #     :return: The last_name of this UserDetails.
    #     :rtype: str
    #     """
    #     return self._last_name

    # @last_name.setter
    # def last_name(self, last_name: str):
    #     """Sets the last_name of this UserDetails.


    #     :param last_name: The last_name of this UserDetails.
    #     :type last_name: str
    #     """

    #     self._last_name = last_name

    @property
    def email(self) -> str:
        """Gets the email of this UserDetails.


        :return: The email of this UserDetails.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this UserDetails.


        :param email: The email of this UserDetails.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone_number(self) -> str:
        """Gets the phone_number of this UserDetails.


        :return: The phone_number of this UserDetails.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number: str):
        """Sets the phone_number of this UserDetails.


        :param phone_number: The phone_number of this UserDetails.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def user_id(self) -> str:
        """Gets the user_id of this UserDetails.


        :return: The user_id of this UserDetails.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this UserDetails.


        :param user_id: The user_id of this UserDetails.
        :type user_id: str
        """

        self._user_id = user_id
