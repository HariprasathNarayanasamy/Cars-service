# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserInfoSansPwd(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_name: str=None, first_name: str=None, last_name: str=None, email: str=None, phone: str=None):  # noqa: E501
        """UserInfoSansPwd - a model defined in Swagger

        :param user_name: The user_name of this UserInfoSansPwd.  # noqa: E501
        :type user_name: str
        :param first_name: The first_name of this UserInfoSansPwd.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this UserInfoSansPwd.  # noqa: E501
        :type last_name: str
        :param email: The email of this UserInfoSansPwd.  # noqa: E501
        :type email: str
        :param phone: The phone of this UserInfoSansPwd.  # noqa: E501
        :type phone: str
        """
        self.swagger_types = {
            'user_name': str,
            'first_name': str,
            'last_name': str,
            'email': str,
            'phone': str
        }

        self.attribute_map = {
            'user_name': 'user_name',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'email': 'email',
            'phone': 'phone'
        }
        self._user_name = user_name
        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt) -> 'UserInfoSansPwd':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_info_sans_pwd of this UserInfoSansPwd.  # noqa: E501
        :rtype: UserInfoSansPwd
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self) -> str:
        """Gets the user_name of this UserInfoSansPwd.


        :return: The user_name of this UserInfoSansPwd.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this UserInfoSansPwd.


        :param user_name: The user_name of this UserInfoSansPwd.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def first_name(self) -> str:
        """Gets the first_name of this UserInfoSansPwd.


        :return: The first_name of this UserInfoSansPwd.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this UserInfoSansPwd.


        :param first_name: The first_name of this UserInfoSansPwd.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this UserInfoSansPwd.


        :return: The last_name of this UserInfoSansPwd.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this UserInfoSansPwd.


        :param last_name: The last_name of this UserInfoSansPwd.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def email(self) -> str:
        """Gets the email of this UserInfoSansPwd.


        :return: The email of this UserInfoSansPwd.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this UserInfoSansPwd.


        :param email: The email of this UserInfoSansPwd.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone(self) -> str:
        """Gets the phone of this UserInfoSansPwd.


        :return: The phone of this UserInfoSansPwd.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this UserInfoSansPwd.


        :param phone: The phone of this UserInfoSansPwd.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone
